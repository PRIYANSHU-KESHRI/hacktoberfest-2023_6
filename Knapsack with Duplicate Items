Given a set of N items, each with a weight and a value, represented by the array w and val respectively. Also, a knapsack with weight limit W.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.
Note: Each item can be taken any number of times.

Example 1:

Input: 
N = 2
W = 3
val = {1, 1}
wt = {2, 1}
Output: 
3
Explanation: 
1.Pick the 2nd element thrice.
2.Total profit = 1 + 1 + 1 = 3. Also the total weight = 1 + 1 + 1  = 3 which is <= 3.




def knapsackUnbounded(N, W, val, wt):
    dp = [0] * (W + 1)
    
    for w in range(1, W + 1):
        for i in range(N):
            if wt[i] <= w:
                dp[w] = max(dp[w], dp[w - wt[i]] + val[i])
    
    return dp[W]

# Example usage
N = 2
W = 3
val = [1, 1]
wt = [2, 1]
result = knapsackUnbounded(N, W, val, wt)
print(result)
